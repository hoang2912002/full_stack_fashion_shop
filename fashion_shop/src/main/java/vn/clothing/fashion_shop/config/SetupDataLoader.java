package vn.clothing.fashion_shop.config;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.core.annotation.AnnotatedElementUtils;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.method.HandlerMethod;
import org.springframework.web.servlet.mvc.method.RequestMappingInfo;
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;

import lombok.RequiredArgsConstructor;
import vn.clothing.fashion_shop.constants.GenderEnum;
import vn.clothing.fashion_shop.constants.util.SlugUtil;
import vn.clothing.fashion_shop.constants.util.SplitCamelCase;
import vn.clothing.fashion_shop.domain.Permission;
import vn.clothing.fashion_shop.domain.Role;
import vn.clothing.fashion_shop.domain.User;
import vn.clothing.fashion_shop.repository.PermissionRepository;
import vn.clothing.fashion_shop.repository.RoleRepository;
import vn.clothing.fashion_shop.repository.UserRepository;
import vn.clothing.fashion_shop.web.rest.DTO.permission.GetPermissionDTO;

/*
 * GI·∫¢I TH√çCH C√ÅCH HO·∫†T ƒê·ªòNG
 * 
 * I. implements ApplicationListener<ContextRefreshedEvent>
 * 
 * üöÄ 1Ô∏è‚É£ ApplicationListener l√† g√¨?
 *      - ApplicationListener l√† interface g·ªëc c·ªßa c∆° ch·∫ø s·ª± ki·ªán (event system) trong Spring Framework.
 *      - N·∫øu b·∫°n mu·ªën "nghe" m·ªôt lo·∫°i s·ª± ki·ªán n√†o ƒë√≥ trong Spring (v√≠ d·ª• khi context ƒë∆∞·ª£c t·∫°o, 
 *      khi bean ƒë∆∞·ª£c load, khi refresh xong, khi app shutdown...),
 *      th√¨ b·∫°n ch·ªâ c·∫ßn implements ApplicationListener<Lo·∫°i S·ª± Ki·ªán>
 *      v√† override onApplicationEvent().
 * 
 * üß† 2Ô∏è‚É£ ContextRefreshedEvent l√† g√¨?
 *      - ContextRefreshedEvent l√† m·ªôt event ƒë·∫∑c bi·ªát trong Spring lifecycle ‚Äî n√≥ ƒë∆∞·ª£c publish khi 
 *      ApplicationContext (container) ƒë∆∞·ª£c kh·ªüi t·∫°o xong ho·∫∑c refresh xong.
 *      - C·ª• th·ªÉ:
 *          + Khi Spring Boot start, n√≥ s·∫Ω t·∫°o ApplicationContext (n∆°i ch·ª©a t·∫•t c·∫£ c√°c bean).
 *          + Sau khi t·∫•t c·∫£ bean ƒë∆∞·ª£c kh·ªüi t·∫°o, dependency ƒë∆∞·ª£c inject, v√† context ƒë√£ s·∫µn s√†ng d√πng,
 *            Spring s·∫Ω b·∫Øn ra event ContextRefreshedEvent.  
 *          + M·ªçi bean n√†o l·∫Øng nghe (implements ApplicationListener<ContextRefreshedEvent>) ƒë·ªÅu s·∫Ω ƒë∆∞·ª£c g·ªçi.
 * 
 * ‚öôÔ∏è 3Ô∏è‚É£ V√¨ sao ph·∫£i implements ApplicationListener<ContextRefreshedEvent>
 *      - B·ªüi v√¨ b·∫°n mu·ªën th·ª±c hi·ªán m·ªôt c√¥ng vi·ªác sau khi to√†n b·ªô context (c√°c bean) ƒë√£ s·∫µn s√†ng v√≠ d·ª• nh∆∞:
 *          + T·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh (roles, admin, permissions,...)
 *          + G·ªçi setup logic (load config file, sync data)
 *          + Seed database ban ƒë·∫ßu.
 *      - Khi ƒë√≥, n·∫øu b·∫°n ch·ªâ d√πng @PostConstruct (ch·∫°y khi bean v·ª´a kh·ªüi t·∫°o) th√¨ l√∫c ƒë√≥:
 *          + M·ªôt s·ªë bean kh√°c c√≥ th·ªÉ ch∆∞a s·∫µn s√†ng (VD repository, handlerMapping,...)
 *          + B·∫°n kh√¥ng th·ªÉ qu√©t to√†n b·ªô endpoint ƒë∆∞·ª£c v√¨ RequestMappingHandlerMapping ch∆∞a ho√†n t·∫•t load.
 *      - Do ƒë√≥, b·∫°n ph·∫£i ch·ªù ƒë·∫øn ContextRefreshedEvent
 *          + V√¨ t·∫°i th·ªùi ƒëi·ªÉm n√†y, Spring ƒë√£ ho√†n t·∫•t load to√†n b·ªô route, controller, repository, security.
 *          + C√≥ th·ªÉ qu√©t to√†n b·ªô RequestMappingHandlerMapping ƒë·ªÉ l·∫•y ra endpoints.
 * 
 * üß© 4Ô∏è‚É£ T√≥m t·∫Øt Roadmap ng·∫Øn g·ªçn
    Spring Boot kh·ªüi ƒë·ªông
      ‚Üì
    T·∫°o ApplicationContext
        ‚Üì
    Load t·∫•t c·∫£ bean, controller, mapping
        ‚Üì
    Ph√°t ContextRefreshedEvent
        ‚Üì
    G·ªçi onApplicationEvent() trong SetupDataLoader
        ‚Üì
    Qu√©t t·∫•t c·∫£ endpoint, t·∫°o permission, role, admin
        ‚Üì
    App s·∫µn s√†ng nh·∫≠n request

 * II. Dependency injection
 * 
 * ‚öôÔ∏è 1Ô∏è‚É£ T·ªïng quan: Dependency Injection trong Spring
 *      - Khi Spring kh·ªüi ƒë·ªông, n√≥ t·∫°o ra c√°c bean (ƒë·ªëi t∆∞·ª£ng singleton ho·∫∑c prototype) v√† l∆∞u v√†o ApplicationContext.
 *      - Khi b·∫°n khai b√°o trong constructor. Spring s·∫Ω t·ª± ƒë·ªông t√¨m trong context m·ªôt bean c√≥ ki·ªÉu (type) l√† 
 *      RequestMappingHandlerMapping, v√† inject (ti√™m) n√≥ v√†o tham s·ªë handlerMapping. 
 * 
 * ‚ö†Ô∏è 2Ô∏è‚É£ V·∫•n ƒë·ªÅ ph√°t sinh: C√≥ nhi·ªÅu bean c√πng lo·∫°i
 *      - Spring Boot framework t·ª± ƒë·ªông ƒëƒÉng k√Ω nhi·ªÅu bean thu·ªôc ki·ªÉu RequestMappingHandlerMapping.
 *      - V√≠ d·ª• trong ·ª©ng d·ª•ng Spring Web MVC / Spring WebFlux, c√≥ th·ªÉ t·ªìn t·∫°i:
        | T√™n Bean                       | Ki·ªÉu                                           | Ch·ª©c nƒÉng                             |
        | ------------------------------ | ---------------------------------------------- | ------------------------------------- |
        | `requestMappingHandlerMapping` | `RequestMappingHandlerMapping`                 | mapping ch√≠nh c·ªßa REST Controller     |
        | `viewControllerHandlerMapping` | `RequestMappingHandlerMapping` (ho·∫∑c subclass) | mapping cho view (n·∫øu c√≥)             |
        | `endpointHandlerMapping`       | `RequestMappingHandlerMapping`                 | mapping cho actuator endpoints        |
        | `webMvcHandlerMapping`         | `RequestMappingHandlerMapping`                 | (trong 1 s·ªë config) mapping chung MVC |

 *      => üí• K·∫øt qu·∫£: Khi Spring th·∫•y b·∫°n c·∫ßn RequestMappingHandlerMapping, n√≥ kh√¥ng bi·∫øt ph·∫£i ch·ªçn c√°i n√†o.
 *  
 * üí° 3Ô∏è‚É£ Gi·∫£i ph√°p: @Qualifier
 *      - @Qualifier n√≥i cho Spring bi·∫øt ch√≠nh x√°c bean n√†o b·∫°n mu·ªën inject
 *      ‚Üí b·∫±ng t√™n bean trong context.
 * 
 * üîç 4Ô∏è‚É£ T√™n bean "requestMappingHandlerMapping" t·ª´ ƒë√¢u ra?
 *      - Spring Boot t·ª± ƒë·∫∑t t√™n m·∫∑c ƒë·ªãnh cho c√°c bean MVC ch√≠nh, theo t√™n class
 * 
 * üß† 5Ô∏è‚É£ V√¨ sao SetupDataLoader c·∫ßn ƒë√∫ng bean n√†y?
 *      - Map<RequestMappingInfo, HandlerMethod> map = handlerMapping.getHandlerMethods();
 *      - Do ph∆∞∆°ng th·ª©c n√†y tr·∫£ v·ªÅ t·∫•t c·∫£ route mapping c·ªßa REST Controller.
 *      - N·∫øu inject nh·∫ßm bean ki·ªÉu kh√°c (v√≠ d·ª• endpointHandlerMapping d√†nh cho actuator) th√¨:
 *          + S·∫Ω kh√¥ng l·∫•y ƒë∆∞·ª£c route c·ªßa c√°c controller trong app, kh√¥ng c√≥ endpoint.
 *  
 * üó∫Ô∏è 6Ô∏è‚É£ T√≥m t·∫Øt roadmap injection t·∫°i runtime
 *      - Khi Spring kh·ªüi t·∫°o bean SetupDataLoader
 *      - N√≥ ƒë·ªçc constructor:
 *          + Th·∫•y 1 ƒëang g·ªçi ƒë·∫øn 1 bean v·ªõi type l√† RequestMappingHandlerMapping 
 *          s·∫Ω v√¥ context ƒë·ªÉ t√¨m bean ƒë√≥ nh∆∞ng do c√≥ t√™n tr√πng nhau d·∫´n ƒë·∫øn l·ªói 
 *          + Cho n√™n c·∫ßn c√≥ @Qualifier( t√™n c·ªßa bean ƒë√≥ )
 * 
 * üß© 4Ô∏è‚É£ Vai tr√≤ c·ªßa RequestMappingHandlerMapping
 *      - ƒê√¢y l√† class ch·ªãu tr√°ch nhi·ªám √°nh x·∫° to√†n b·ªô controller endpoint trong ·ª©ng d·ª•ng.    
 *      - N√≥ l∆∞u map:
 *          Map<RequestMappingInfo, HandlerMethod>
 *          + RequestMappingInfo ‚Üí ch·ª©a path, method (GET/POST/PUT/DELETE,‚Ä¶)
 *          + HandlerMethod ‚Üí ch√≠nh l√† method Java t∆∞∆°ng ·ª©ng (UserController.getUsers() ch·∫≥ng h·∫°n)
 */

@Component
public class SetupDataLoader implements ApplicationListener<ContextRefreshedEvent> {

    private final RequestMappingHandlerMapping handlerMapping;
    private final PermissionRepository permissionRepository;
    private final RoleRepository roleRepository;
    private final UserRepository userRepository;
    
    private final PasswordEncoder passwordEncoder;

    public SetupDataLoader(
        @Qualifier("requestMappingHandlerMapping") RequestMappingHandlerMapping handlerMapping, 
        PermissionRepository permissionRepository,
        RoleRepository roleRepository,
        UserRepository userRepository,
        PasswordEncoder passwordEncoder
    ) {
        this.handlerMapping = handlerMapping;
        this.permissionRepository = permissionRepository;
        this.roleRepository = roleRepository;
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    // optional: ch·ªâ qu√©t package app c·ªßa b·∫°n

    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {
        Map<RequestMappingInfo, HandlerMethod> map = handlerMapping.getHandlerMethods();

        List<Permission> listPermission = new ArrayList<>();
        map.forEach((info, handlerMethod) -> {
            Set<String> patterns = info.getPathPatternsCondition().getPatternValues();
            String path = patterns.stream().findFirst().orElse("");

            List<String> range = List.of("USER", "ADMIN");
            //Module
            String[] arrPath = path.split("/"); 
            String module = "UNKNOWN";

            if (arrPath.length > 3) {
                String third = arrPath[3].toUpperCase();
                module = (arrPath.length > 4 && range.contains(third)) ? arrPath[4].toUpperCase() : third;

                Set<RequestMethod> methods = info.getMethodsCondition().getMethods();
                String method = (methods == null || methods.isEmpty()) ? "GET" : methods.iterator().next().name();

                String endpointName = handlerMethod.getMethod().getName();
                String readableName = SplitCamelCase.convertCamelCase(endpointName);

                listPermission.add(
                    Permission.builder()
                    .apiPath(path)
                    .method(method)
                    .module(module)
                    .name(readableName)
                    .activated(true)
                    .build()
                );
            }
        });
        List<Permission> permissionsDB = this.permissionRepository.findAll();
        Set<String> existingEndpoints = permissionsDB.stream()
            .map(p -> p.getApiPath() + "::" + p.getMethod())
            .collect(Collectors.toSet());

        List<Permission> newPermissions = listPermission.stream()
            .filter(p -> !existingEndpoints.contains(p.getApiPath() + "::" + p.getMethod()))
            .toList();
        if(!newPermissions.isEmpty()){
            this.permissionRepository.saveAll(newPermissions);
        }
        
        Role roleByName = this.roleRepository.findByName("admin");
        if(roleByName == null){
            List<Permission> listPermissions = this.permissionRepository.findAll();
            Role role = new Role();
            role.setName("admin");
            role.setSlug(SlugUtil.toSlug(role.getName()));
            role.setActivated(true);
            role.setPermissions(listPermissions);
            this.roleRepository.save(role);
        }

        Optional<User> userOptional = this.userRepository.findByEmail("admin@gmail.com");
        if(!userOptional.isPresent() || userOptional == null){
            User user = new User();
            user.setEmail("admin@gmail.com");
            user.setFullName("Admin");
            user.setGender(GenderEnum.MALE);
            user.setAge(23);
            user.setActivated(true);
            user.setPassword(this.passwordEncoder.encode("123456"));
            Role adminRole = this.roleRepository.findByName("admin");
            if(adminRole != null){
                user.setRole(adminRole);
            }
            this.userRepository.save(user);
        }

        if(newPermissions.isEmpty() && roleByName != null && userOptional.isPresent()){
            System.out.println(">>> SKIP INIT DATABASE ALREADY HAVE DATA....");
        }
        else{
            System.out.println(">>> END INIT DATABASE");
        }

    }

}
